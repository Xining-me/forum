name: Android CI - Gradle build (fixed Java17 & sdkmanager)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'build type (debug or release)'
        required: false
        default: 'debug'
  push:
    branches:
      - main

env:
  NODE_VERSION: 18
  ANDROID_API_LEVEL: 33
  BUILD_TOOLS_VERSION: '33.0.2'

jobs:
  android-build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show repo root & important files (debug)
        run: |
          echo "Workdir: $(pwd)"
          ls -la
          ls -la android || true
          ls -la package.json package-lock.json yarn.lock || true
          node -v || true
          npm -v || true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Ensure npm stable (optional)
        run: |
          echo "npm version: $(npm -v)"

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-cache-${{ runner.os }}-

      - name: Install npm dependencies (safe)
        run: |
          if [ -f package-lock.json ]; then
            npm ci || (echo "npm ci failed, fallback to npm install" && npm install)
          else
            npm install
          fi

      - name: Setup Java (Temurin 17)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Print java info
        run: java -version

      - name: Ensure Android SDK root exists
        run: |
          # Common SDK roots on ubuntu runners
          if [ -d "/usr/local/lib/android/sdk" ]; then
            echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk"
            echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          elif [ -d "$HOME/Android/Sdk" ]; then
            echo "ANDROID_SDK_ROOT=$HOME/Android/Sdk"
            echo "ANDROID_SDK_ROOT=$HOME/Android/Sdk" >> $GITHUB_ENV
          else
            echo "No preinstalled Android SDK found at known locations. Creating ANDROID_SDK_ROOT at $HOME/android-sdk"
            mkdir -p $HOME/android-sdk
            echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          fi
          echo "ANDROID_SDK_ROOT is now $ANDROID_SDK_ROOT"

      - name: Install Android commandline tools and SDK components (via sdkmanager)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          PATH: ${{ env.ANDROID_SDK_ROOT }}/cmdline-tools/latest/bin:$PATH
        run: |
          set -e
          # If cmdline-tools not present, try to bootstrap using packages already in SDK or download.
          if [ ! -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "cmdline-tools not found at $ANDROID_SDK_ROOT/cmdline-tools/latest. Attempting to download commandlinetools."
            mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
            cd /tmp
            # download linux commandlinetools (adjust URL if needed)
            curl -sS -L "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o cmdline-tools.zip
            unzip -q cmdline-tools.zip -d cmdline-tools
            mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
            mv cmdline-tools/cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/latest/ || true
            rm -rf cmdline-tools cmdline-tools.zip
          fi

          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          echo "sdkmanager path: $(which sdkmanager || true)"
          yes | sdkmanager --licenses || true

          # Install required components
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API_LEVEL }}" "build-tools;${{ env.BUILD_TOOLS_VERSION }}" || true

      - name: Accept Android SDK licenses (redundant-safe)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -e
          if [ -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses || true
          elif [ -x "$ANDROID_SDK_ROOT/tools/bin/sdkmanager" ]; then
            yes | "$ANDROID_SDK_ROOT/tools/bin/sdkmanager" --licenses || true
          else
            echo "sdkmanager not found; continuing"
          fi

      - name: Ensure android/gradlew exists
        run: |
          if [ ! -f android/gradlew ]; then
            echo "ERROR: android/gradlew not found. Ensure gradle wrapper files committed under android/."
            ls -la android || true
            exit 1
          fi

      - name: Fix gradlew permissions (make executable)
        run: |
          git update-index --chmod=+x android/gradlew || true
          chmod +x android/gradlew || true
          ls -la android/gradlew

      - name: Prepare JS bundle for Android
        run: |
          set -e
          mkdir -p android/app/src/main/assets
          mkdir -p android/app/src/main/res
          if [ -f index.js ]; then
            npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res || true
          else
            echo "index.js not found. Ensure JS bundle is present at android/app/src/main/assets/index.android.bundle"
          fi
        env:
          NODE_ENV: production

      - name: Build with Gradle
        working-directory: android
        run: |
          set -e
          ./gradlew --version || true
          if [ "${{ github.event.inputs.build_type }}" = "release" ]; then
            echo "Building RELEASE"
            ./gradlew clean assembleRelease --stacktrace --no-daemon
          else
            echo "Building DEBUG"
            ./gradlew clean assembleDebug --stacktrace --no-daemon
          fi

      - name: Show built APKs
        run: |
          echo "Artifacts under android/app/build/outputs/apk/:"
          find android/app/build/outputs/apk -type f -name "*.apk" -print || true

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/**/*.apk
