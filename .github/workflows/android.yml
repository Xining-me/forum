name: Android CI - Enhanced Build Pipeline

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug or release)'
        required: true
        default: 'debug'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 18name: 完整CI/CD工作流 (Expo React Native)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: '构建类型 (debug/release)'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

env:
  NODE_VERSION: 18
  ANDROID_API_LEVEL: 33
  BUILD_TOOLS_VERSION: '33.0.2'
  EXPO_CLI_VERSION: 6.3.10

jobs:
  # 代码质量检查
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: 配置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 代码规范检查
        run: |
          npm install -g eslint
          eslint src/ --ext .js,.jsx

  # 单元测试
  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: 配置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      - name: 运行单元测试
        run: |
          npm install -g jest
          jest --coverage

  # Android构建
  android-build:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 120
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 调试环境信息
        run: |
          echo "工作目录: $(pwd)"
          ls -la
          ls -la android || true
          node -v
          npm -v

      - name: 配置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装项目依赖
        run: |
          if [ -f package-lock.json ]; then
            npm ci || (echo "npm ci失败，尝试npm install" && npm install)
          else
            npm install
          fi
          npm install -g expo-cli@${{ env.EXPO_CLI_VERSION }}

      - name: 配置Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 配置Android SDK
        run: |
          # 设置Android SDK根目录
          if [ -d "/usr/local/lib/android/sdk" ]; then
            echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          else
            mkdir -p $HOME/android-sdk
            echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          fi
          
          # 安装命令行工具
          if [ ! -x "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" ]; then
            mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
            curl -sS -L "https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip" -o cmdline-tools.zip
            unzip -q cmdline-tools.zip -d cmdline-tools
            mv cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
          fi
          
          # 配置环境变量
          export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-${{ env.ANDROID_API_LEVEL }}" "build-tools;${{ env.BUILD_TOOLS_VERSION }}"

      - name: 缓存Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 准备JS Bundle
        run: |
          mkdir -p android/app/src/main/assets
          npx react-native bundle \
            --platform android \
            --dev ${{ github.event.inputs.build_type == 'debug' }} \
            --entry-file index.js \
            --bundle-output android/app/src/main/assets/index.android.bundle \
            --assets-dest android/app/src/main/res

      - name: 构建APK
        working-directory: android
        run: |
          chmod +x gradlew
          if [ "${{ github.event.inputs.build_type || 'debug' }}" = "release" ]; then
            ./gradlew clean assembleRelease --stacktrace
          else
            ./gradlew clean assembleDebug --stacktrace
          fi

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.event.inputs.build_type || 'debug' }}
          path: android/app/build/outputs/apk/**/*.apk

  # 部署(仅release版本)
  deploy:
    if: github.event.inputs.build_type == 'release' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: android-build
    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: android-apk-release
          path: ./artifacts

      - name: 显示构建产物
        run: ls -la ./artifacts

      # 这里可以添加部署步骤，例如上传到应用商店或分发平台
      - name: 部署说明
        run: echo "请在此处添加发布到应用商店的步骤"
